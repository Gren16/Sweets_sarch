<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>最短ルートの交通機関表示</title>
  <%= stylesheet_link_tag "top", media: "all" %>
  <script async src="https://maps.googleapis.com/maps/api/js?key=<%= ENV["GOOGLE_MAP_API_KEY"] %>&libraries=places&callback=initMap"></script>
</head>
<body>
  <% if logged_in? %>
    <%= render "shared/header" %>
  <% else %>
    <%= render "shared/before_login_header" %>
  <% end %>

  <h1 class="mb-4 text-center">最短ルートの交通機関表示</h1>

  <% if @bookmarks.present? %>
    <div id="map"></div>
    <div id="transportation"></div>

    <%= javascript_tag do %>
      function initMap() {
        var map = new google.maps.Map(document.getElementById("map"), {
          zoom: 12,
          center: {lat: <%= @bookmarks.first.store.latitude %>, lng: <%= @bookmarks.first.store.longitude %>}
        });

        var directionsService = new google.maps.DirectionsService();
        var directionsRenderer = new google.maps.DirectionsRenderer({
          map: map,
          suppressMarkers: true,
        });

        var infoWindow = new google.maps.InfoWindow();

        // Define travelTimes object
        var travelTimes = {};
        var results = {};
        var fastestRouteDisplayed = false;

        // 現在地を取得
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(position => {
            const currentLocation = {
              lat: position.coords.latitude,
              lng: position.coords.longitude
            };

            // 地図の中心を現在地に変更
            map.setCenter(currentLocation);

            // 現在地と目的地のマーカーを表示
            const currentLocationMarker = new google.maps.Marker({
              position: currentLocation,
              map: map,
              title: "現在地"
            });

            currentLocationMarker.addListener("click", () => {
              infoWindow.setContent("現在地");
              infoWindow.open(map, currentLocationMarker);
            });

            const storeLocation = {lat: <%= @bookmarks.last.store.latitude %>, lng: <%= @bookmarks.last.store.longitude %>};
            const storeMarker = new google.maps.Marker({
              position: storeLocation,
              map: map,
              title: "<%= @bookmarks.last.store.name %>"
            });

            storeMarker.addListener("click", () => {
              infoWindow.setContent("<%= @bookmarks.last.store.name %>");
              infoWindow.open(map, storeMarker);
            });

            // Calculate travel times for driving, walking, and transit modes
            const travelModes = ["DRIVING", "WALKING", "TRANSIT"];

            travelModes.forEach(mode => {
              const request = {
                origin: currentLocation,
                destination: storeLocation,
                travelMode: mode
              };

              directionsService.route(request, function(result, status) {
                if (status == "OK") {
                  travelTimes[mode] = result.routes[0].legs[0].duration.value;
                  results[mode] = result;
                } else if (status == "ZERO_RESULTS") {
                  console.warn(`No results found for ${mode}`);
                } else {
                  console.error(`Directions request failed due to ${status} for ${mode}`);
                }

                if (!fastestRouteDisplayed && (Object.keys(travelTimes).length === travelModes.length - (travelModes.includes("TRANSIT") ? 1 : 0))) {
                  const fastestMode = Object.keys(travelTimes).reduce((a, b) => travelTimes[a] < travelTimes[b] ? a : b);
                  directionsRenderer.setDirections(results[fastestMode]);
                  displayFastestRoute(results[fastestMode], fastestMode);
                  fastestRouteDisplayed = true;
                }
              });
            });
          }, () => {
            alert("位置情報の取得に失敗しました");
          });
        } else {
          alert("このブラウザは位置情報に対応していません");
        }
      }

      function displayFastestRoute(result, mode) {
        const route = result.routes[0].legs[0];
        const fastestRouteInfo = `
          <h2>一番早い交通機関: ${mode === "DRIVING" ? "車" : mode === "WALKING" ? "徒歩" : "公共交通機関"}</h2>
          <p>所要時間: ${route.duration.text}</p>
          <p>距離: ${route.distance.text}</p>
        `;
        const transportationDiv = document.getElementById("transportation");
        transportationDiv.innerHTML = fastestRouteInfo;
      }

      // Add event listener for beforeunload to delete the route
      window.addEventListener("beforeunload", () => {
        const routeId = <%= @bookmarks.first.id %>; // Ensure the correct route ID is used
        fetch(`/routes/${routeId}/delete_route`, { method: "DELETE" })
          .then(response => {
            if (!response.ok) {
              throw new Error('Network response was not ok');
            }
            return response.json();
          })
          .then(data => {
            console.log("Route deleted:", data);
          })
          .catch(error => {
            console.error("There was a problem with the fetch operation:", error);
          });
      });
    <% end %>
  <% else %>
    <p>ルートを表示するためのブックマークがありません。</p>
  <% end %>

  <script>
    window.addEventListener("load", () => {
      fetch("<%= reset_session_routes_path %>", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({})
      }).then(response => {
        if (!response.ok) {
          throw new Error("Network response was not ok");
        }
        return response.json();
      }).then(data => {
        console.log("Session reset:", data);
      }).catch(error => {
        console.error("There was a problem with the fetch operation:", error);
      });
    });
  </script>
</body>
<%= render "shared/footer" %>
</html>