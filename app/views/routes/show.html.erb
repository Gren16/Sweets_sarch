<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>ブックマーク巡回ルート</title>
  <%= stylesheet_link_tag "show_route", media: "all" %>
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
  <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
</head>
<body>
  <%= render "shared/header" if logged_in? %>

  <div class="row">
    <div class="col-lg-10 offset-lg-1 flex-column d-flex justify-content-between align-items-center custom-spacing">
      <%= link_to "トップページに戻る", root_path, class: "btn btn-primary" %>
    </div>
  </div>

  <% if @bookmarks.present? %>
    <div id="map"></div>
    <div id="route-info"></div>

    <%= javascript_tag do %>
      document.addEventListener("DOMContentLoaded", function () {
        const map = L.map("map", {zoomControl: false,}).setView([<%= @bookmarks.first.store.latitude %>, <%= @bookmarks.first.store.longitude %>], 12);

        // OpenStreetMapタイルを追加
        L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
          attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
          maxZoom: 18,
        }).addTo(map);

        const bookmarks = <%= @bookmarks.map { |bookmark| { name: bookmark.store.name, latitude: bookmark.store.latitude, longitude: bookmark.store.longitude } }.to_json.html_safe %>;

        navigator.geolocation.getCurrentPosition(position => {
          const currentLocation = [position.coords.latitude, position.coords.longitude];

          // Waypointsの設定（23箇所まで制限）
          const waypoints = bookmarks.slice(0, 23).map(bookmark => [bookmark.latitude, bookmark.longitude]);

          // 全てのマーカーを作成
          const markers = [
            { name: "現在地", position: currentLocation },
            ...bookmarks.slice(0, 23).map(bookmark => ({ name: bookmark.name, position: [bookmark.latitude, bookmark.longitude] }))
          ];

          // マーカーを地図に追加
          markers.forEach(marker => {
            L.marker(marker.position, { title: marker.name }).addTo(map).bindPopup(marker.name);
          });

          // Google Routes APIにリクエストを送信
          fetchRoutesFromGoogle(currentLocation, waypoints, map);
        }, () => {
          alert("位置情報の取得に失敗しました");
        });
      });

      function fetchRoutesFromGoogle(origin, waypoints, map) {
        const endpoint = "/fetch_routes";
        const csrfToken = document.querySelector('meta[name="csrf-token"]').content;

        // リクエストデータを作成
        const requestData = {
          origin: origin,
          destination: waypoints[waypoints.length - 1], // 最終地点
          waypoints: waypoints.slice(0, waypoints.length - 1).map(waypoint => ({
            location: { latLng: { latitude: waypoint[0], longitude: waypoint[1] } }
          })),
          travelMode: "DRIVE"
        };

        fetch(endpoint, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "X-CSRF-Token": csrfToken
          },
          body: JSON.stringify(requestData)
        })
          .then(response => response.json())
          .then(data => {
            console.log("API Response:", JSON.stringify(data, null, 2));
            if (data.routes && data.routes.length > 0) {
              drawRouteOnMap(data.routes[0], map);
              displayRouteInfo(data.routes[0]);
            } else {
              alert("ルートが見つかりませんでした");
            }
          })
          .catch(error => {
            console.error("エラー:", error);
          });
      }

      function drawRouteOnMap(route, map) {
        if (!route || !route.polyline || !route.polyline.encodedPolyline) return;

        const coordinates = decodePolyline(route.polyline.encodedPolyline);
        const geojson = {
          type: "Feature",
          geometry: {
            type: "LineString",
            coordinates: coordinates
          }
        };

        L.geoJSON(geojson, {
          style: { color: "blue", weight: 5, opacity: 0.75 }
        }).addTo(map);
      }

      function decodePolyline(encoded) {
        let index = 0, lat = 0, lng = 0, coordinates = [];
        while (index < encoded.length) {
          let b, shift = 0, result = 0;
          do {
            b = encoded.charCodeAt(index++) - 63;
            result |= (b & 0x1f) << shift;
            shift += 5;
          } while (b >= 0x20);
          let deltaLat = ((result & 1) ? ~(result >> 1) : (result >> 1));
          lat += deltaLat;

          shift = 0;
          result = 0;
          do {
            b = encoded.charCodeAt(index++) - 63;
            result |= (b & 0x1f) << shift;
            shift += 5;
          } while (b >= 0x20);
          let deltaLng = ((result & 1) ? ~(result >> 1) : (result >> 1));
          lng += deltaLng;

          coordinates.push([lat * 1e-5, lng * 1e-5]);
        }
        return coordinates.map(coord => [coord[1], coord[0]]);
      }

      function displayRouteInfo(route) {
        const infoDiv = document.getElementById("route-info");
        const totalDistance = route.distanceMeters;
        const totalDuration = parseInt(route.duration.replace("s", ""), 10);

        const durationInMinutes = totalDuration / 60;
        const distanceInKm = totalDistance / 1000;

        infoDiv.innerHTML = `
          <div class="card">
            <div class="route-info-row">
              <div class="icon-green">
                <i class="fas fa-clock text-green-500"></i>
              </div>
              <p class="Timerequired">予想所要時間: ${durationInMinutes.toFixed(1)} 分</p>
            </div>
            <div class="route-info-row">
              <div class="icon-circle">
                <i class="fas fa-road text-blue-500"></i>
              </div>
              <p class="distance">総距離: ${distanceInKm.toFixed(1)} km</p>
            </div>
          </div>
        `;
      }
    <% end %>
  <% else %>
    <p>ブックマークがありません。</p>
  <% end %>
</body>
</html>